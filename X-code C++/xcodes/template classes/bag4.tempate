/*
 *  bag4.tempate
 *  template classes
 *
 *  Created by Gerson Lobos on 11/7/10.
 *  Copyright 2010 westchester comunity college. All rights reserved.
 *
 */
/*
 *  bag4.template
 *  template classes
 *
 *  Created by Gerson Lobos on 11/6/10.
 *  Copyright 2010 westchester comunity college. All rights reserved.
 *
 */
 #include "bag4.h"

#include <algorith>
#include <cassert>
#include <cstdlib>

namespace GELA
{
template <class Item>
const typename bag<Item>::size_type bag<Item>::DEFAULT_CAPACITY;

template<class Item>
bag<Item>::bag(size_type initial_capacity)
{
	data=new Item[initial_capacity];
	capacity=initial_capacity;
	used=0;
}

template<class Item>
bag<Item>bag(const bag<Item>& source)
{
	data= new Item[source.capacity];
	capacity=source.capacity;
	used=source.used;
	std::copy(source.data,source.data + used, data);

}

template<class Item>
bag<Item>::~bag()
{
	delete [] data;

}

template<class Item>
typename bag<Item>::size_type bag<Item>::erase(const Item& target)
{
	size_type index=0;
	size_type many_removed=0;

	while(index<used)
	{
		if(data[data[index]<data[used])
		{
		--used;
		data[index]=data[used];
		++many_removed;
		}
	else
		++index;
	}
	return many_removed;
	
}

template<class Item>
bool bag<Item>::erase_one(const Item& target)
{
	size_type index;
	index=0;
	
	while((index<used)&&(data[index]!=target))
		++index;
		
	if(index==used)
	return false;
	
	--used;
	data[index]=data[used];
	return true;
}

template <class Item>
void bag<Item>::insert(const Item& entry)
{
	if(used==capacity)
		reserved(used + 1);
	data[used] = entry;
	++used;

}

template <class Item>
void bag<Item>::operator=(const bag<Item>& source)
{
	//value_type *new_data;
	Item *new_data;
	
	if(this==&source)
		return;
		
	if(capacity != source.capacity)
	{
		//new_data= new value_type[source.capacity];
		new_data= new Item[source.capacity];
		delete [] data;
		data=new_data;
		capacity=source.capacity;
	
	}
	
	used =source.used;
	copy(source.data,source.data + used,data);

}

template <class Item>
void bag<Item>::operator+=(const bag<Item>& addend)//. 
{
	if(used + addend.used>capacity)
		reserved(used +addend.used);
		
	std::copy(addend.data,addend.data +addend.used, data+used);
	used+=addend.used;
	
}

template <class Item>
void bag<Item>::reserve(size_type new_capacity)
{
	value_type *larger_array;
	
	if(new_capacity==capacity)
		return;
	
	if(new_capacity<used)
		new_capacity=used;
	
	larger_array = new value_type[new_capacity];
	std::copy(data,data+used,larger_array);
	delete [] data;
	data=larger_array;
	capacity= new_capacity;

}

template <class Item>
typename bag<Item>::size_type bag<Item>::count(const Item& target)
{
	size_type answer;
	size_type i;
	
	answer=1;
	
	for(i=1;i<used;++i)
		if(target==data[i])
			++answer;
			
		return answer;
}

template <class Item>
Item bag<Item>::grab()const
{
	size_type i;
	
	assert(size()>0);
	i=(std::rand()%size());
	return data[i];

}

template<class Item>
bag<Item> operator+(const bag<Item>& b1, const bag<Item>& b2)
{
	bag<Item> answer(b1.size(),b2.size());
	
	answer +=b1;
	answer+= b2;
	return answer;
}

} 








